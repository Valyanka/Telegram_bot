"""
Simple echo Telegram Bot example on Aiogram framework using
Yandex.Cloud functions.
"""

import aiohttp
import json
import logging
import os
import ydb
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import time

log = logging.getLogger(__name__)
log.setLevel(os.environ.get('LOGGING_LEVEL', 'INFO').upper())

driver = ydb.Driver(endpoint=os.getenv('YDB_ENDPOINT'), database=os.getenv('YDB_DATABASE'))
driver.wait(fail_fast=True, timeout=5)
pool = ydb.SessionPool(driver)

film = ""
user_id = ""
Set_of_blocked = set()
bot = Bot(os.environ.get('TOKEN'))


def get_common(session):
    # Create the transaction and execute query.
    s = "SELECT name, count(name) as count FROM my_table GROUP BY name ORDER BY count DESC LIMIT 15"
    return session.transaction().execute(
        s,
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(15).with_operation_timeout(4)
    )


def execute_query(session):
    global film
    global user_id
    x = str(time.time())[1:-2]
    s = "INSERT INTO my_table (id, user_id, name) VALUES ('" + x + "', " + str(user_id) + ",'" + str(film) + "');"
    # –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ —Ç–∞–∫–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥, —Å f —Å—Ç—Ä–æ–∫–∞–º–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
    # –ò –∑–∞ —Ç–æ, —á—Ç–æ —Å–æ–∑–¥–∞—é —á–µ—Ç—ã—Ä–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–π —Ü–µ–ª–∏, –∏–Ω–∞—á–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–æ,
    # –∞ –Ω–µ–ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ—á–µ–Ω—å —Ö–æ—Ç–µ–ª–æ—Å—å
    return session.transaction().execute(
        s,
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(15).with_operation_timeout(4)
    )


def get_stat(session):
    s = "SELECT name, count(name) as count FROM my_table WHERE user_id = " + str(
        user_id) + "GROUP BY name ORDER BY count DESC"
    return session.transaction().execute(
        s,
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(15).with_operation_timeout(4)
    )


def get_hist(session):
    s = "SELECT name FROM my_table WHERE user_id = " + str(user_id)
    return session.transaction().execute(
        s,
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(15).with_operation_timeout(4)
    )


button_hi = KeyboardButton('–ü—Ä–∏–≤–µ—Ç! üëã')

greet_kb = ReplyKeyboardMarkup()
greet_kb.add(button_hi)


async def get_json(session: aiohttp.ClientSession, url: str) -> str:
    """
    Asyncronously fetch (get-request) single url using provided session
    :param session: aiohttp session object
    :param url: target http url
    :return: fetched text
    """
    async with session.get(url) as resp:
        body = None
        if str(resp.status)[0] == '2':
            body = await resp.json()
        return body


async def async_fetch(session: aiohttp.ClientSession, url: str):
    rating = 0
    adress = url
    async with session.get(url) as resp:
        html = await resp.text()
        rat = html.find("""<div class="rating""")
        if rat != -1:
            a = html[rat:].find("""title=""") + len("""title=""") + 1
            rating = html[rat:][a: a + 3]
        else:
            rat = "–Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"
        b = html.find("""<li><a href="/film/""") + len("""<li><a href="/film/""")
        dif = 1
        s = html[b: b + 1]
        while s.isdigit():
            s = html[b: b + dif + 1]
            dif += 1
        adress = "https://www.kinopoisk.ru/film/" + html[b: b + dif]
        adress_to_watch = "https://www.kinopoisk.gg/film/" + html[b: b + dif]
        return adress, adress_to_watch, rating


# Handlers
async def start(message: types.Message):
    await message.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å , {}!'.format(message.from_user.first_name) +
                        """ –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º, —Å–µ—Ä–∏–∞–ª –∏–ª–∏ –º—É–ª—å—Ç–∏–∫!
–í—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /help, 
–æ–¥–Ω–∞–∫–æ –º–æ–∂–Ω–æ –∏ –±–µ–∑ —ç—Ç–æ–≥–æ - –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å!""")


async def help_han(message: types.Message):
    await message.reply("""–°–æ–≤–µ—Ç—É—é –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å "–ü–æ—Å–ª–µ–¥–Ω—è—è –ª—é–±–æ–≤—å –Ω–∞ –∑–µ–º–ª–µ". –ï—Å–ª–∏ –∂–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ, —Ç–æ 
–≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∏–ª—å–º!\n\n/start - –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫? –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞!
/stat - –í—ã–≤–µ–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Ç–æ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã –∏—Ö –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏
/hist - –í—ã–≤–µ–¥–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
/common_stat - –ü–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –ø–æ–¥–≥–ª—è–¥–µ—Ç—å, –∫–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã –∏—â—É—Ç —á–∞—â–µ –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ (–≤—ã —Ç–æ–∂–µ —É—á—Ç–µ–Ω—ã!)
/help - –õ—é–±–∏—Ç–µ —Ä–µ–∫—É—Ä—Å–∏–∏? –¢–æ–≥–¥–∞ –∂–º–∏—Ç–µ!""")


async def stat(message: types.Message):
    global user_id
    # global Set_of_blocked
    s = ''
    user_id = message.from_user.id
    # if user_id in Set_of_blocked:
    # await message.answer("""–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —É–∑–Ω–∞–π—Ç–µ, —á—Ç–æ —Å–º–æ—Ç—Ä—è—Ç –¥—Ä—É–≥–∏–µ!
    # –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏–æ–≤–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–º–∞–Ω–¥–æ–π on_common_stat""")
    for i in range((len(pool.retry_operation_sync(get_stat)[0].rows))):
        s = s + " ".join([i.decode('UTF-8') if type(i) != int else str(i) for i in
                          list(pool.retry_operation_sync(get_stat)[0].rows[i].values())]) + "\n"
    await message.answer('–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é:\n' + s)


async def hist(message: types.Message):
    global user_id
    # global Set_of_blocked
    s = ''
    user_id = message.from_user.id
    # if user_id in Set_of_blocked:
    # await message.answer("""–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —É–∑–Ω–∞–π—Ç–µ, —á—Ç–æ —Å–º–æ—Ç—Ä—è—Ç –¥—Ä—É–≥–∏–µ!
    # –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏–æ–≤–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–º–∞–Ω–¥–æ–π on_common_stat""")
    for i in range((len(pool.retry_operation_sync(get_hist)[0].rows))):
        s = s + " ".join([i.decode('UTF-8') if type(i) != int else str(i) for i in
                          list(pool.retry_operation_sync(get_hist)[0].rows[i].values())]) + "\n"
    await message.answer('–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:\n' + s)


async def common_stat(message: types.Message):
    global user_id
    s = ''
    user_id = message.from_user.id
    for i in range((len(pool.retry_operation_sync(get_common)[0].rows))):
        s = s + " ".join([i.decode('UTF-8') if type(i) != int else str(i) for i in
                          list(pool.retry_operation_sync(get_common)[0].rows[i].values())]) + "\n"
    await message.answer('–¢–æ–ø 15 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n' + s)


async def echo(message: types.Message):
    splitted_message = "_".join(message.text.split())
    splitted_message_plus = "+".join(message.text.split())
    platform = "–ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ"
    async with aiohttp.ClientSession() as session:
        url = "https://www.kinopoisk.ru/index.php?kp_query=" + splitted_message_plus
        url_to_watch = "https://www.kinopoisk.gg/index.php?kp_query=" + splitted_message_plus
        response, response_gg, rating = await async_fetch(session, url)
        async with session.get(response) as resp:
            if resp.status == 404:
                response = url
                response_gg = url_to_watch
                platform = 'imDb'
    global film
    global user_id
    films_describe = None
    user_id = message.from_user.id
    url_poster = "https://imdb-api.com/en/API/SearchTitle/k_okn835lz/" + splitted_message
    film = " ".join(message.text.split()).lower()
    async with aiohttp.ClientSession() as session:
        films_info = await get_json(session, url_poster)
        if films_info is not None and len(films_info) > 0:
            url_describe = "https://imdb-api.com/ru/API/Title/k_okn835lz/" + films_info['results'][0]['id']
            films_describe = await get_json(session, url_describe)
    if rating == 0 and films_describe is not None:
        rating = films_describe['imDbRating']
    if films_describe is not None:
        string = "üåü–†–µ–π—Ç–∏–Ω–≥ –Ω–∞ " + platform + ": " + str(rating) + "\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä:\n" + response_gg + "\n" \
                 + films_describe['plotLocal'] \
                 + "\n\n" + "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∏–Ω–æ–ø–æ–∏—Å–∫:\n" + response
        await bot.send_photo(chat_id=user_id,
                             photo='https://imdb-api.com/API/ResizeImage?apiKey=k_okn835lz&size=200x300&url='
                                   + films_info['results'][0]['image'], caption=film + "\n" + string)
    pool.retry_operation_sync(execute_query)


async def register_handlers(dp: Dispatcher):
    """Registration all handlers before processing update."""

    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(stat, commands=['stat'])
    dp.register_message_handler(help_han, commands=['help'])
    dp.register_message_handler(hist, commands=['hist'])
    dp.register_message_handler(common_stat, commands=['common_stat'])
    dp.register_message_handler(echo)

    log.debug('Handlers are registered.')


async def process_event(event, dp: Dispatcher):
    """
    Converting an Yandex.Cloud functions event to an update and
    handling tha update.
    """

    update = json.loads(event['body'])
    log.debug('Update: ' + str(update))
    Bot.set_current(dp.bot)
    update = types.Update.to_object(update)
    await dp.process_update(update)


async def handler(event, context):
    """Yandex.Cloud functions handler."""
    if event['httpMethod'] == 'POST':
        bot = Bot(os.environ.get('TOKEN'))
        storage = MemoryStorage()
        dp = Dispatcher(bot, storage=storage)
        await register_handlers(dp)
        await process_event(event, dp)
        return {'statusCode': 200, 'body': 'ok'}
    return {'statusCode': 405}
